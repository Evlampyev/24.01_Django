#### Описание полей модели
Django предоставляет множество типов полей:
* CharField - поле для хранения строковых данных
* EmailField - поле для хранения электронной почты
* TextField - поле для хранения текстовых данных большой длины (большой текст)
* IntegerField - поле для хранения целочисленных данных
* DecimalField - поле для хранения десятичных чисел (вещественные, но точные)
* BooleanField - поле для хранения логических значений (True/False)
* DateTimeField - поле для хранения даты и времени
* ForeignKey - поле для связи с другой моделью
* ManyToManyField - поле для связи с другой моделью в отношении "многие-ко-многим"


1. CharField - поле для хранения строковых данных. Параметры:
max_length (максимальная длина строки), blank (может ли поле быть пустым), null (может ли поле содержать значение Null), 
default (значение по умолчанию).
2. IntegerField - поле для хранения целочисленных данных. Параметры: blank, null, default.
3. TextField - поле для хранения текстовых данных большой длины. Параметры: blank, null, default.
4. BooleanField - поле для хранения логических значений (True/False). Параметры: blank, null, default.
5. DateField - поле для хранения даты. Параметры: auto_now (автоматически устанавливать текущую дату при создании объекта),
auto_now_add (автоматически устанавливать текущую дату при добавлении объекта в базу данных), blank, null, default.
6. DateTimeField - поле для хранения даты и времени. Параметры: auto_now, auto_now_add, blank, null, default.
7. ForeignKey - поле для связи с другой моделью. Параметры: to (имя модели, с которой устанавливается связь),
on_delete (действие при удалении связанного объекта), related_name (имя обратной связи).
8. ManyToManyField - поле для связи с другой моделью в отношении "многие-ко-многим". Параметры: to, related_name.
9. DecimalField - поле для хранения десятичных чисел. Параметры: max_digits (максимальное количество цифр), 
decimal_places (количество знаков после запятой), blank, null, default.
10. EmailField - поле для хранения электронной почты. Параметры: max_length, blank, null, default

#### Миграции

__python manage.py makemigrations <name_app>__ - для создания миграций name_app приложения, без имени - всего проекта
__python manage.py migrate__ - для применения миграций в порядке их создания и применяет изменения к базе данных


#### Получение объектов модели, read
Для получения объектов модели из базы данных можно использовать методы .all(), .get(), .filter()
* all() возвращает все объекты модели
* get() возвращает один объект, соответствующий заданным условиям
* filter() возвращает объекты подходящие под условия фильтрации

##### Фильтрация объектов модели
Для фильтрации объектов модели по заданным условиям можно использовать
метод filter(): __Model.objects.filter(param _ _ filter=value)__
objects - зарезервированное слово
param - поле, по которому будем фильтровать
> пример: User.objects.filter(name__exact='John') - \
> фильтруем по столбцу name, точное значение 'John'
* exact - точное совпадение значения поля
* iexact - точное совпадение значения поля без учета регистра
* contains - значение поля содержит заданный подстроку
* in - значение поля находится в заданном списке значений
* gt - значение поля больше заданного значения
* gte - значение поля больше или равно заданному значению
* lt - значение поля меньше заданного значения
* lte - значение поля меньше или равно заданному значению
* startswith - значение поля начинается с заданной подстроки
* endswith - значение поля заканчивается на заданную подстроку
* range - значение поля находится в заданном диапазоне значений
* date - значение поля является датой, соответствующей заданной дате
* year - значение поля является годом, соответствующим заданному году